openapi: '3.0.3'

info:
  title: 'gowiki API'
  version: '0.0.1'

servers:
  - url: 'http://localhost:9000/'
    description: 'API Server'

paths:
  '/healthcheck':
    get:
      responses:
        '200':
          description: 'OK'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
  '/privatecheck':
    get:
      responses:
        '200':
          description: 'Auth OK, this is private # TODO'
      security:
        - cookieAuth: []
  '/users':
    post:
      requestBody:
        description: 'signup(username, password) 2 <= username.len() <= 20, 2 <= password.len() <= 50, regex '
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: 'Bob'
              password: 'pass'
      responses:
        '200':
          description: 'signup'
      security: []
  '/login':
    post:
      requestBody:
        description: 'login'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: 'Bob'
              password: 'pass'
      responses:
        '200':
          description: 'login success'
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - username
                  - message
                properties:
                  status:
                    type: integer
                  username:
                    type: string
                  message:
                    type: string
              example:
                status: 200
                username: 'Bob'
                message: 'login ok'
    delete:
      responses:
        '200':
          description: 'logout'
      security:
        - cookieAuth: []
  '/groups':
    get:
      responses:
        '200':
          description: 'userの入っているgroupを返却する'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroups'
              example:
                user_groups:
                  - 'suburi-dev'
                  - 'public'
                  - 'myPrivate'
      security:
        - cookieAuth: []

    post:
      requestBody:
        description: 'postでgroup作成、deleteは後で作る(deleteでgroup削除)'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
            example:
              group_name: 'Bobs_group'
              group_members:
                - "Bob"
                - "Nancy"

      responses:
        '200':
          description: 'group作成'
          content:
            application/json:
              schema:
                type: object
                required:
                  - group_name
                properties:
                  group_name:
                    type: string
              example:
                group_name: 'Bobs_group'
      security:
        - cookieAuth: []
  '/groups/{groupId}':
    post:
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
          description: 'group id'
      requestBody:
        description: 'update group member'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
            example:
              group_name: 'Bobs_group'
              group_members:
                - "Bob"
                - "Nancy"
      responses:
        '200':
          description: 'member update success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  group_name:
                    type: string
              example:
                group_name: 'Bobs_group'
      security:
        - cookieAuth: []
  '/articles':
    get:
      responses:
        '200':
          description: 'get all article user can see'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllArticles'
              example:
                group_number: 2
                groups:
                  - group_name: 'Bobs_group'
                    articles_id:
                      - 1
                      - 2
                      - 3
                  - group_name: 'Alices_group'
                    articles_id:
                      - 4
                      - 5
                      - 6
      security:
        - cookieAuth: []
    post:
      requestBody:
        description: 'new article'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticlePost'
            example:
              title: '僕のメモ'
              article_path: '/path/to/article'
              tags:
                - 'memo'
                - 'note'
                - 'メモです'
              group_name: 'Bobs_group'
              body: 'CONTENT'
      responses:
        '200':
          description: 'content update success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles_id:
                    type: integer
              example:
                article_id: 2
      security:
        - cookieAuth: []
  '/articles/{articleId}':
    get:
      parameters:
        - in: path
          name: articleId
          required: true
          schema:
            type: integer
          description: 'article_id'
          example:
            articleId: 1
      responses:
        '200':
          description: 'get article body'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
              example:
                article_id: 1
                title: '僕のメモ'
                article_path: '/path/to/article'
                tags:
                  - 'memo'
                  - 'tag_name'
                group_name: 'Bobs_group'
                body: 'CONTENT'
      security:
        - cookieAuth: []
    post:
      parameters:
        - in: path
          name: articleId
          required: true
          schema:
            type: integer
          description: 'article_id'
      requestBody:
        description: 'update article'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticlePost'
            example:
              title: '僕のメモ'
              article_path: '/path/to/article'
              tags:
                - 'memo'
                - 'note'
                - 'メモです'
              group_name: 'Bobs_group'
              body: 'CONTENT'
      responses:
        '200':
          description: 'content update success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles_id:
                    type: integer
              example:
                article_id: 2
      security:
        - cookieAuth: []
components:
  schemas:
    Error:
      description: 'Error'
      type: object
      required:
        - message
        - code
      properties:
        message:
          title: 'error message'
          type: string
          example: 'unexpected error'
        code:
          title: 'status code'
          type: integer
          minimum: 100
          maximum: 600
          example: 500
    User:
      description: 'username/password'
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Group:
      description: 'group articleの公開範囲をグループ単位にする'
      type: object
      required:
        - group_name
      properties:
        group_name:
          type: string
        group_members:
          type: array
          items:
            type: string
    UserGroups:
      description: 'ユーザが所属するグループ一覧'
      type: object
      required:
        - user_groups
      properties:
        user_groups:
          type: array
          items:
            type: string
    Article:
      description: '記事'
      type: object
      required:
        - article_id
        - title
        - article_path
        - tags
        - group_name
        - body
      properties:
        article_id:
          type: integer
        title:
          type: string
        article_path:
          type: string
        tags:
          type: array
          items:
            type: string
        group_name:
          type: string
        body:
          type: string
    ArticlePost:
      description: 'no id article for post'
      type: object
      required:
        - title
        - article_path
        - tags
        - group_name
        - body
      properties:
        title:
          type: string
        article_path:
          type: string
        tags:
          type: array
          items:
            type: string
        group_name:
          type: string
        body:
          type: string
    AllArticles:
      description: 'All articles'
      type: object
      required:
        - group_number
        - groups
      properties:
        group_number:
          type: integer
        groups:
          type: array
          items:
            type: object
            properties:
              group_name:
                type: string
              articles_id:
                type: array
                items:
                  type: integer
  responses:
    OK:
      description: 'ok'
    UnexpectedError:
      description: 'unexpected error'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSIONID
